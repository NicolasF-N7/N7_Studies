-- Specification du module arbre_binaire qui crée une structure de type arbre binaire pouvant contenir des informations T_Element qui sont en réalité des 
--entiers (des identifiants uniques).
generic
    type T_Element is private;

package Arbre_Binaire is
    
    type T_AB is limited private;--type arbre binaire
    
    --Initialiser un arbre binaire.
    procedure Initialiser_AB (Arbre : out T_AB) with
            Post => Est_Vide_AB(Arbre);
    
    --Savoir si un arbre ne contient aucun élément.
    function Est_Vide_AB (Arbre : in T_AB) return Boolean;
    
    --Ajouter le noeud de clé Cle dans un arbre.
    procedure Ajouter_AB (Arbre : in out T_AB; id : in T_Element; Donnee : in T_Element) with
            Post => Est_Present_AB(Arbre, Donnee);
    
    -- Savoir si un individu (Donnee) est présent dans un arbre donné.
    function Est_Present_AB (Arbre : in T_AB; Donnee : in T_Element) return Boolean;
    
    -- Modifier un element dans l'arbre.
    procedure Modifier_AB (Arbre : in out T_AB; Donnee : in T_Element) with 
            post => Est_Present_AB (Arbre,Donnee);
    
    -- Connaitre la taille (le nombre d'individus) d'un arbre donné.
    function Taille_AB (Arbre : in T_AB) return Integer;
    
    -- Supprimer un individu et tout ses ancêtres.
    procedure Supprimer_AB(Arbre : in out T_AB; Donnee : in T_Element) with
            pre => Est_Present_AB(Arbre, Donnee),
            post => not Est_Present_AB(Arbre, Donnee);
    
    --Detruire un arbboure.
    procedure Detruire_AB (Arbre : in out T_AB) with
            post => Est_Vide_AB(Arbre);
     
    --Afficher un arbre binaire dans le sens croissant des indices.
    procedure Afficher_AB (Arbre : in T_AB);
    
private 
    	type T_Noeud;
	type T_AB is access T_Noeud;
	type T_Noeud is
                record
			Donnee : T_Element;
			Sous_Arbre_Gauche : T_AB;
			Sous_Arbre_Droit : T_AB;
		end record;
end Arbre_Binaire;






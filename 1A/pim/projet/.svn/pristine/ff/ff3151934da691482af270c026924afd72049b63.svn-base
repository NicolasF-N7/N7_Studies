-- Specification du module liste-chainee qui défini des listes dynamiques qui seront utilisées dans le registre pour stocker les données d'une personne. 
with Ada.Text_IO; use Ada.Text_IO;
with Calendar; use Calendar;

generic
    type T_Element is private; 
    
package Liste_Chainee is
    
    type T_Liste is private;
    
        -- Initialiser une liste.
	procedure Initialiser_Liste_Chainee (Liste : out T_Liste) with
                post => Est_Vide (Liste);
        
        -- Détruire une liste.
	procedure Detruire (Liste : in out T_Liste) with
	    pre => not Est_Vide (Liste),
                post => Est_Vide (Liste);
        
        -- Renvoie si une liste est vide ou pas.
        function Est_Vide (Liste : in T_Liste) return boolean;
        
        -- Savoir la taille de la liste.
        function Taille (Liste : in T_Liste) return Integer;
        
        -- Savoir si un élément est présent dans une liste.  
        function Present (Liste : in T_Liste; Element : in T_Element) return Boolean with
                pre => not Est_Vide (Liste);
        
	-- Ajouter un élément en tete de liste.
        procedure Ajouter (Liste: in out T_Liste; Element : in T_Element) with
	    pre => not Present (Liste, Element),
                post => Present (Liste, Element);
        
        -- Supprimer un élément dans la liste.
        procedure Supprimer (Liste : in out T_Liste; Element: in T_Element)  with
	    pre => Present (Liste, Element),
	    post => not Present (Liste, Element);

generic
        with procedure Appliquer_Sur_Element (Element : in T_Element);
procedure Appliquer_Sur_Tous (Liste : in T_Liste);
    
private
    type T_Cellule;
    type T_Liste is access T_Cellule;
    type T_Cellule is
        record
            Valeur: T_Element;
            Suivant: T_Liste;
        end record;
end Liste_Chainee;

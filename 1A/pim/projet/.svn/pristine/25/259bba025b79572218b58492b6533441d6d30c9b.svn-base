generic
    type T_Element is private;

package Arbre_Binaire is
    
    type T_AB is limited private;--type arbre binaire
    
    --Initialiser un arbre binaire.
    procedure Initialiser (Arbre : out T_AB) with
            Post => Est_Vide(Arbre);
    
    --Savoir si un arbre ne contient aucun élément.
    function Est_Vide (Arbre : in T_AB) return Boolean;
    
    --Ajouter un descendant (cle) dans un arbre après la cle d'un parent.
    procedure Ajouter (Arbre : in out T_AB; Id : in T_Element) with
            Post => Est_Present(Arbre, Id);
    
    -- Savoir si un individu est présent dans un arbre donné.
    function Est_Present (Arbre : in T_AB; Id : in T_Element) return Boolean;
    
    -- Connaitre la taille (le nombre d'individus) d'un arbre donné.
    function Taille (Arbre : in T_AB) return Integer with
    post => Taille'result >=0 and (Taille'result=0) = Est_Vide(Arbre);
    
    -- Supprimer un individu et tout ses ancêtres.
    procedure Supprimer(Arbre : in out T_AB; Id : in T_Element) with
            pre => Est_Present(Arbre, Id),
            post => not Est_Present(Arbre, Id);
    
    --Detruire un arbre.
    procedure Detruire (Arbre : in out T_AB) with
            post => Est_Vide(Arbre);
     
    --Afficher un arbre.
    generic 
                with procedure Afficher_Element(Id : in T_Element);
    procedure Afficher (AB : in T_AB);
    
    
private 
    	type T_Noeud;
	type T_AB is access T_Noeud;
	type T_Noeud is
                record
			Id : T_Element;
			Sous_Arbre_Gauche : T_AB;
			Sous_Arbre_Droit : T_AB;
			
		end record;
   
end Arbre_Binaire;






package allumettes;

/** Lance une partie des 13 allumettes en fonction des arguments fournis
 * sur la ligne de commande.
 * @author	Xavier Crégut
 * @version	$Revision: 1.5 $
 */
public class Partie {
	private static final int NB_JOUEURS = 2;

	/** Lancer une partie. En argument sont donnés les deux joueurs sous
	 * la forme nom@stratégie.
	 * @param args la description des deux joueurs
	 */
	
	public static void main(String[] args) {
		try {
			////////////////////////////////////////////////////////////////////////////////////
			verifierNombreArguments(args);
			
			boolean confiant = false;
			//Recherche de -confiant dans les arguments
			if(args[0] == "-confiant") {
				confiant = true;
			}
			else if(args[0].contains("-")) {
				throw new ConfigurationException("Mauvaise synthaxe des arguments.");
			}
			
			//Recuperation des nom et stratégies des joueurs
			//Ici on sait qu'il y a 2 ou 3 arguments dans args
			int indexOffset = confiant ? 1 : 0; //Décalage de l'indexe des arguments joueur@strategie
			String tabJoueurs[][] = new String[NB_JOUEURS][];//contient les nom et strat de chaque joueurs
			for(int i = 0; i < NB_JOUEURS; i++) {
				tabJoueurs[0] = args[0 + indexOffset].split("@");
			}
			
			//Verification de la synthaxe des arguments: respect de joueur@strategie
			if(tabJoueurs[0].length != 2 || tabJoueurs[1].length != 2) {
				throw new ConfigurationException("Mauvaise synthaxe des arguments.");
			}
			
			//Separation des nom des joueur et strategies
			String nomJoueurs[] = new String[NB_JOUEURS];
			String strategieJoueurs[] = new String[NB_JOUEURS];
			
			for(int i = 0; i < NB_JOUEURS; i++) {
				nomJoueurs[i] = tabJoueurs[i][0];
				strategieJoueurs[i] = tabJoueurs[i][1];
			}
			///////////////////////////////////interpreterArguments//////////////////////////////////
			
			//Creation des strategies
			Strategie stratJoueurs[] = new Strategie[NB_JOUEURS];
			for(int i = 0; i < NB_JOUEURS; i++) {
				switch(strategieJoueurs[i].toLowerCase()) {
					case "naif": stratJoueurs[i] = new StrategieNaive();
						break;
					case "rapide": stratJoueurs[i] = new StrategieRapide();
						break;
					case "expert": stratJoueurs[i] = new StrategieExpert();
						break;
					case "tricheur": stratJoueurs[i] = new StrategieTricheur();
						break;
					default: stratJoueurs[i] = new StrategieHumain();
				}
			}
			
			
			//Creation des joueurs
			Joueur joueurs[] = new Joueur[NB_JOUEURS];
			for(int i = 0; i < NB_JOUEURS; i++) {
				joueurs[i] = new Joueur(nomJoueurs[i], stratJoueurs[i]);
			}
			
			//Creation du jeu
			Jeu jeu;
			if(confiant) {
				jeu = new Plateau();
			}
			else{
				jeu = new PlateauProcuration();
			}
			
			Arbitre arbitre = new Arbitre(joueurs[0], joueurs[1], confiant);
			
			

		} catch (ConfigurationException e) {
			System.out.println();
			System.out.println("Erreur : " + e.getMessage());
			afficherUsage();
			System.exit(1);
		}
	}
	
	private static void interpreterArguments(String[] args) {
		
	}

	private static void verifierNombreArguments(String[] args) {
		final int nbJoueurs = 2;
		if (args.length < nbJoueurs) {
			throw new ConfigurationException("Trop peu d'arguments : "
					+ args.length);
		}
		if (args.length > nbJoueurs + 1) {
			throw new ConfigurationException("Trop d'arguments : "
					+ args.length);
		}
	}

	/** Afficher des indications sur la manière d'exécuter cette classe. */
	public static void afficherUsage() {
		System.out.println("\n" + "Usage :"
				+ "\n\t" + "java allumettes.Partie joueur1 joueur2"
				+ "\n\t\t" + "joueur est de la forme nom@stratégie"
				+ "\n\t\t" + "strategie = naif | rapide | expert | humain | tricheur"
				+ "\n"
				+ "\n\t" + "Exemple :"
				+ "\n\t" + "	java allumettes.Partie Xavier@humain "
					   + "Ordinateur@naif"
				+ "\n"
				);
	}

}

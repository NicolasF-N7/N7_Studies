Date de l'évaluation : vendredi 8 mai 2020, 21:33:05 (UTC+0200)

!!! Il est interdit de changer Jeu.java (voir evaluation2/Jeu.java.diff)
!!! Il est interdit de changer CoupInvalideException.java (voir evaluation2/CoupInvalideException.java.diff)

Nombre de similitudes (voir evaluation2/sim_java.txt) : 7
Les similitudes indiquent généralement du code à restructurer.

Erreurs checkstyle (différentes/types) : 44/10	(voir evaluation2//checkstyle.log)

Utilisation de 'Scanner' : ok
	./allumettes/StrategieHumain.java:	Scanner scanner;
	./allumettes/StrategieHumain.java:		scanner = new Scanner(System.in);

Utilisation de 'split' : ok mais un seul split devrait suffir !  Code à restructurer...
	./allumettes/Partie.java:		if (args[0 + indexOffset].split("@").length != 2 || args[1 + indexOffset].split("@").length != 2) {
	./allumettes/Partie.java:			tabJoueurs[i] = args[i + indexOffset].split("@");

Utilisation de 'Random' : ok
	./allumettes/StrategieNaive.java:import java.util.Random;
	./allumettes/StrategieNaive.java:	Random rand;
	./allumettes/StrategieNaive.java:		rand = new Random();

Utilisation de '3' : la constante Jeu.PRISE_MAX doit être utilisée	(pénalité : 2)
	./allumettes/Partie.java:		//Ici on sait qu'il y a 2 ou 3 arguments dans args
	./allumettes/StrategieNaive.java:		//Renvoie un entier entre 1 et 3 inclus
	./allumettes/StrategieRapide.java:	 * Obtenir le nombre d'allumettes à retirer selon la strategie rapide, c'est à dire la prise max (3) ou bien le nombre d'allumettes restantes
	./allumettes/StrategieExpert.java:			case 3: return 2;//Gagné
	./allumettes/StrategieExpert.java:			case 0: return 3;//Gagné

Utilisation de 'System.exit' : ok

Compilation de Partie.java : OK.
Compilation de Arbitre.java : OK.
Compilation de Test.java : OK.
Test exemplePresqueSujet : ok
Test exempleTricheurSujet : ok
Test exempleConfiantTricheurSujet : ok
Test exempleRobustesse : ok
Test exempleRapideRapide : ok
Test exempleTricheurExpert : ok
Test exempleExpertTest : ok
Test exempleExpertTest2 : ok
Test exempleExpertTest3 : ok
Test exempleExpertTest4 : ok
Test exempleRapideTest : ok
Test exempleRapideTest1 : ok
Test exempleRapideTest2 : ok
Test exempleRapideTest3 : ok

On recommence avec les classes/interfaces fournies : Jeu ConfigurationException CoupInvalideException
Compilation de Partie.java : OK.
Compilation de Arbitre.java : OK.

Vérification du respect du diagramme de classe...
Test FormeTest : OK (2 tests)	(voir evaluation2/FormeTest.log)

Compilation de Test.java : OK.
Test allumettes.Test : Tests run: 1,  Failures: 1	(voir evaluation2/allumettes.Test.log)
    1) initializationError(allumettes.Test)
        Exception: No runnable methods

Compilation de Test.java : OK.
Test allumettes.Test : Tests run: 1,  Failures: 1	(voir evaluation2/allumettes.Test.log)
    1) initializationError(allumettes.Test)
        Exception: No runnable methods


Total pénalités : 2
